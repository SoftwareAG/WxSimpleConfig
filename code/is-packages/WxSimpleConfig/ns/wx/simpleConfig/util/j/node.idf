<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="node_type">interface</value>
  <value name="node_nsName">wx.simpleConfig.util.j</value>
  <value name="is_public">false</value>
  <value name="encodeutf8">true</value>
  <value name="shared">Ci8vIGxvY2FsIHNlY3JldCBtYW5hZ2VtZW50CnN0YXRpYyBmaW5hbCBTdHJpbmcgbG9jYWxTZWNy
ZXQgPSBnZXRMb2NhbFNlY3JldCgpOwpzdGF0aWMgZmluYWwgU3RyaW5nIGdldExvY2FsU2VjcmV0
KCl7CglTdHJpbmcgc1NlY3JldCA9ICJtYW5hZ2UiOwoJaWYoU3lzdGVtLmdldGVudigpLmNvbnRh
aW5zS2V5KCJXeFNpbXBsZUNvbmZpZ1NlY3JldCIpICl7CgkJU3lzdGVtLm91dC5wcmludGxuKCJG
b3VuZCBXeFNpbXBsZUNvbmZpZ1NlY3JldCBzeXN0ZW0gcHJvcGVydHkiKTsKCQlzU2VjcmV0ID0g
U3lzdGVtLmdldGVudigiV3hTaW1wbGVDb25maWdTZWNyZXQiKTsKCX1lbHNlewoJCVN5c3RlbS5v
dXQucHJpbnRsbigiV3hTaW1wbGVDb25maWdTZWNyZXQgc3lzdGVtIHByb3BlcnR5IG5vdCBwcmVz
ZW50LCB1c2luZyBkZWZhdWx0ISIpOwoJfQoJcmV0dXJuIHNTZWNyZXQ7Cn0KCi8vIGxvY2FsIHNh
bHQgbWFuYWdlbWVudApzdGF0aWMgZmluYWwgbG9uZyBsTG9jYWxTYWx0ID0gZ2V0TExvY2FsU2Fs
dCgpOwpzdGF0aWMgZmluYWwgbG9uZyBnZXRMTG9jYWxTYWx0KCl7CglTdHJpbmcgc1NhbHQgPSBu
dWxsOwoJaWYoU3lzdGVtLmdldGVudigpLmNvbnRhaW5zS2V5KCJXeFNpbXBsZUNvbmZpZ1NhbHQi
KSApewoJCVN5c3RlbS5vdXQucHJpbnRsbigiRm91bmQgV3hTaW1wbGVDb25maWdTYWx0IHN5c3Rl
bSBwcm9wZXJ0eSIpOwoJCXNTYWx0ID0gU3lzdGVtLmdldGVudigiV3hTaW1wbGVDb25maWdTYWx0
Iik7Cgl9ZWxzZXsKCQlTeXN0ZW0ub3V0LnByaW50bG4oIld4U2ltcGxlQ29uZmlnU2FsdCBzeXN0
ZW0gcHJvcGVydHkgbm90IHByZXNlbnQsIHVzaW5nIGRlZmF1bHQhIik7Cgl9CglyZXR1cm4gZ2V0
U3RyaW5nSGFzaChlbmhhbmNlU2FsdFN0cmluZyhzU2FsdCkpOwp9CnN0YXRpYyBmaW5hbCBieXRl
W10gYkxvY2FsU2FsdCA9IGdldEJMb2NhbFNhbHQoKTsKc3RhdGljIGZpbmFsIGJ5dGVbXSBnZXRC
TG9jYWxTYWx0KCl7CglyZXR1cm4gTG9uZ1RvQnl0ZXMobExvY2FsU2FsdCk7Cn0Kc3RhdGljIGZp
bmFsIFN0cmluZyBlbmhhbmNlU2FsdFN0cmluZyhTdHJpbmcgb3JpZ2luYWxTYWx0U3RyaW5nKXsK
CVN0cmluZyBzYWx0U3RyaW5nID0gb3JpZ2luYWxTYWx0U3RyaW5nOwoJaWYobnVsbD09c2FsdFN0
cmluZyB8fCAwPT1zYWx0U3RyaW5nLmxlbmd0aCgpKQoJCXNhbHRTdHJpbmcgPSAiSGltYWxheWFS
b3NlIjsKCWlmKHNhbHRTdHJpbmcubGVuZ3RoKCk8MTApCgkJc2FsdFN0cmluZyArPSAiSGltYWxh
eWFSb3NlIjsKCXJldHVybiBzYWx0U3RyaW5nOwp9Ci8vIGxvY2FsIHV0aWxpdGllcwpzdGF0aWMg
ZmluYWwgbG9uZyBnZXRTdHJpbmdIYXNoKFN0cmluZyBzKXsKCWxvbmcgaGFzaCA9IDg3Mzk4MjMw
ODM3N0w7Cglmb3IgKGludCBpID0gMDsgaSA8IHMubGVuZ3RoKCk7IGkrKykgewoJICAgIGhhc2gg
PSBoYXNoKjMxXmkgKyBzLmNoYXJBdChpKTsKCX0KCXJldHVybiBoYXNoOwp9CnN0YXRpYyBmaW5h
bCBieXRlIFtdIExvbmdUb0J5dGVzIChsb25nIGwpewoJamF2YS5uaW8uQnl0ZUJ1ZmZlciBidWZm
ZXIgPSBqYXZhLm5pby5CeXRlQnVmZmVyLmFsbG9jYXRlKExvbmcuQllURVMpOwoJYnVmZmVyLnB1
dExvbmcobCk7CglyZXR1cm4gYnVmZmVyLmFycmF5KCk7Cn0KCgpwdWJsaWMgc3RhdGljIGJ5dGVb
XSBsb25nVG9CeXRlcyhsb25nIHgpIHsKCUJ5dGVCdWZmZXIgYnVmZmVyID0gQnl0ZUJ1ZmZlci5h
bGxvY2F0ZShMb25nLkJZVEVTKTsKCWJ1ZmZlci5wdXRMb25nKHgpOwoJcmV0dXJuIGJ1ZmZlci5h
cnJheSgpOwp9Cgpwcml2YXRlIHN0YXRpYyBmaW5hbCBTYWdTbm93Rmxha2Ugc2YgPSBuZXcgU2Fn
U25vd0ZsYWtlKCk7CgovKioKICogQGF1dGhvciBTb2Z0d2FyZSBBRwogKgogKi8KcHVibGljIHN0
YXRpYyBjbGFzcyBTYWdTbm93Rmxha2UgewoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgaW50IFRPVEFM
X0JJVFMgPSA2NDsKCXByaXZhdGUgc3RhdGljIGZpbmFsIGludCBFUE9DSF9CSVRTID0gNDI7Cglw
cml2YXRlIHN0YXRpYyBmaW5hbCBpbnQgTk9ERV9JRF9CSVRTID0gMTA7Cglwcml2YXRlIHN0YXRp
YyBmaW5hbCBpbnQgU0VRVUVOQ0VfQklUUyA9IDEyOwoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3Ry
aW5nIEhPU1ROQU1FID0gIkhPU1ROQU1FIjsKCXByaXZhdGUgZmluYWwgaW50IG1heE5vZGVJZCA9
IChpbnQpIChNYXRoLnBvdygyLCBOT0RFX0lEX0JJVFMpIC0gMSk7Cglwcml2YXRlIGZpbmFsIGlu
dCBtYXhTZXF1ZW5jZSA9IChpbnQpIChNYXRoLnBvdygyLCBTRVFVRU5DRV9CSVRTKSAtIDEpOwoK
CS8vIEN1c3RvbSBFcG9jaCAoSmFudWFyeSAxLCAyMDE1IE1pZG5pZ2h0IFVUQyA9IDIwMTUtMDEt
MDFUMDA6MDA6MDBaKQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgbG9uZyBDVVNUT01fRVBPQ0ggPSAx
NDIwMDcwNDAwMDAwTDsKCglwcml2YXRlIGZpbmFsIGludCBub2RlSWQ7CgoJcHJpdmF0ZSB2b2xh
dGlsZSBsb25nIGxhc3RUaW1lc3RhbXAgPSAtMUw7Cglwcml2YXRlIHZvbGF0aWxlIGxvbmcgc2Vx
dWVuY2UgPSAwTDsKCgkvLyBMZXQgU2VxdWVuY2VHZW5lcmF0b3IgZ2VuZXJhdGUgYSBub2RlSWQK
CXB1YmxpYyBTYWdTbm93Rmxha2UoKSB7CgkJdGhpcy5ub2RlSWQgPSBjcmVhdGVOb2RlSWQoKTsK
CX0KCgkvKioKCSAqIEByZXR1cm4gYSBsb25nIFVVSUQgYmFzZWQgb24gdGhlIFNub3dGbGFrZSBB
bG9nb3JpdGhtLiBUaGUgY2xhc3MgdXNlcyB0aGUgbWFjCgkgKiAgICAgICAgIGFkZHJlc3MgKyB0
aGUgUElEIG9mIHRoZSBwcm9jZXNzLiBJZiB0aGUgbWFjIGlzIG5vdCB2YWxpZAoJICogICAgICAg
ICAoZmY6ZmY6ZmY6ZmY6ZmY6ZmYpIHRoZSBob3N0bmFtZSB2YXJpYWJsZSBpcyB1c2VkIGFzIGZh
bGxiYWNrLiBUaGlzCgkgKiAgICAgICAgIHZhcmlhYmxlIGluIGEgZG9ja2VyIGVudmlyb25tZW50
IHJlcHJlc2VudHMgdGhlIGNvbnRhaW5lciBJZC4gSWYKCSAqICAgICAgICAgdGhlcmUgaXMgbm8g
dmFsaWQgaG9zdG5hbWUgb3IgUElELCBhIHJhbmRvbSBsb25nIGlzIHVzZWQgYXMgbm9kZUlkCgkg
Ki8KCXB1YmxpYyBzeW5jaHJvbml6ZWQgbG9uZyBuZXh0SWQoKSB7CgkJbG9uZyBjdXJyZW50VGlt
ZXN0YW1wID0gdGltZXN0YW1wKCk7CgoJCWlmIChjdXJyZW50VGltZXN0YW1wIDwgbGFzdFRpbWVz
dGFtcCkgewoJCQl0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCJJbnZhbGlkIFN5c3Rl
bSBDbG9jayEiKTsKCQl9CgoJCWlmIChjdXJyZW50VGltZXN0YW1wID09IGxhc3RUaW1lc3RhbXAp
IHsKCQkJc2VxdWVuY2UgPSAoc2VxdWVuY2UgKyAxKSAmIG1heFNlcXVlbmNlOwoJCQlpZiAoc2Vx
dWVuY2UgPT0gMCkgewoJCQkJLy8gU2VxdWVuY2UgRXhoYXVzdGVkLCB3YWl0IHRpbGwgbmV4dCBt
aWxsaXNlY29uZC4KCQkJCWN1cnJlbnRUaW1lc3RhbXAgPSB3YWl0TmV4dE1pbGxpcyhjdXJyZW50
VGltZXN0YW1wKTsKCQkJfQoJCX0gZWxzZSB7CgkJCS8vIHJlc2V0IHNlcXVlbmNlIHRvIHN0YXJ0
IHdpdGggemVybyBmb3IgdGhlIG5leHQgbWlsbGlzZWNvbmQKCQkJc2VxdWVuY2UgPSAwOwoJCX0K
CgkJbGFzdFRpbWVzdGFtcCA9IGN1cnJlbnRUaW1lc3RhbXA7CgoJCWxvbmcgaWQgPSBjdXJyZW50
VGltZXN0YW1wIDw8IChUT1RBTF9CSVRTIC0gRVBPQ0hfQklUUyk7CgkJaWQgfD0gKG5vZGVJZCA8
PCAoVE9UQUxfQklUUyAtIEVQT0NIX0JJVFMgLSBOT0RFX0lEX0JJVFMpKTsKCQlpZCB8PSBzZXF1
ZW5jZTsKCQlyZXR1cm4gaWQ7Cgl9CgoJLy8gR2V0IGN1cnJlbnQgdGltZXN0YW1wIGluIG1pbGxp
c2Vjb25kcywgYWRqdXN0IGZvciB0aGUgY3VzdG9tIGVwb2NoLgoJcHJpdmF0ZSBsb25nIHRpbWVz
dGFtcCgpIHsKCQlyZXR1cm4gSW5zdGFudC5ub3coKS50b0Vwb2NoTWlsbGkoKSAtIENVU1RPTV9F
UE9DSDsKCX0KCgkvLyBCbG9jayBhbmQgd2FpdCB0aWxsIG5leHQgbWlsbGlzZWNvbmQKCXByaXZh
dGUgbG9uZyB3YWl0TmV4dE1pbGxpcyhsb25nIGN1cnJlbnRUaW1lc3RhbXApIHsKCQl3aGlsZSAo
Y3VycmVudFRpbWVzdGFtcCA9PSBsYXN0VGltZXN0YW1wKSB7CgkJCWN1cnJlbnRUaW1lc3RhbXAg
PSB0aW1lc3RhbXAoKTsKCQl9CgkJcmV0dXJuIGN1cnJlbnRUaW1lc3RhbXA7Cgl9CgoJcHJpdmF0
ZSBpbnQgY3JlYXRlTm9kZUlkKCkgewoJCWludCBub2RlSWQ7CgkJdHJ5IHsKCQkJU3RyaW5nQnVp
bGRlciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7CgkJCUVudW1lcmF0aW9uPE5ldHdvcmtJbnRl
cmZhY2U+IG5ldHdvcmtJbnRlcmZhY2VzID0gTmV0d29ya0ludGVyZmFjZS5nZXROZXR3b3JrSW50
ZXJmYWNlcygpOwoJCQkvLyBUaGUgZmlyc3QgbmV0d29yayBpbnRlcmZhY2Ugd2lsbCBiZSBwaWNr
ZWQgYXMgbm9kZUlkCgkJCU5ldHdvcmtJbnRlcmZhY2UgbmV0d29ya0ludGVyZmFjZSA9IG5ldHdv
cmtJbnRlcmZhY2VzLm5leHRFbGVtZW50KCk7CgoJCQlieXRlW10gbWFjID0gbmV0d29ya0ludGVy
ZmFjZS5nZXRIYXJkd2FyZUFkZHJlc3MoKTsKCQkJaWYgKG1hYyAhPSBudWxsKSB7CgkJCQlmb3Ig
KGludCBpID0gMDsgaSA8IG1hYy5sZW5ndGg7IGkrKykgewoJCQkJCXNiLmFwcGVuZChTdHJpbmcu
Zm9ybWF0KCIlMDJYIiwgbWFjW2ldKSk7CgkJCQl9CgkJCX0KCgkJCVN0cmluZyBub2RlSWRTdHIg
PSBzYi50b1N0cmluZygpOwoJCQkvLyBpZiB0aGUgcHJvY2VzcyBpcyBydW5uaW5nIGluIGEgZG9j
a2VyIGNvbnRhaW5lciB0aGVuCgkJCS8vIHRoZXJlIGlzIHRoZSBvcHBvcnR1bml0eSB0aGF0IHRo
ZSBtYWMgYWRkcmVzcyB3aWxsIGJlIGZmOmZmOmZmOmZmOmZmOmZmCgkJCS8vIHdlIG9ic2VydmVk
IHRoYXQgdGhlIHJhbmRvbSBjb250YWluZXJJZCBpcyBwYXNzZWQgdG8gdGhlIGNvbnRhaW5lciBh
cwoJCQkvLyAkSE9TVE5BTUUgZW52IHZhcmlhYmxlLCBpZiBhbHNvIHRoaXMgdmFyaWFibGUgaXMg
YWJzZW50IHdlIGZpbmFsbHkgcmVseSBvbiBhCgkJCS8vIHJhbmRvbSBsb25nLgoKCQkJaWYgKG5v
ZGVJZFN0ci5lcXVhbHMoIkZGRkZGRkZGRkZGRiIpKSB7CgkJCQlNYXA8U3RyaW5nLCBTdHJpbmc+
IG1hcCA9IFN5c3RlbS5nZXRlbnYoKTsKCQkJCWlmIChtYXAuY29udGFpbnNLZXkoSE9TVE5BTUUp
KSB7CgkJCQkJbm9kZUlkU3RyID0gbWFwLmdldChIT1NUTkFNRSk7CgkJCQl9IGVsc2UgewoJCQkJ
CXRocm93IG5ldyBFeGNlcHRpb24oKTsKCQkJCX0KCgkJCX0KCQkJLy8gdG8gZGlzdGluZ3Vpc2gg
YmV0d2VlbiBkaWZmZXJlbnQgcHJvY2Vzc2VzIHJ1bm5pbmcgb24gdGhlIHNhbWUgbWFjaGluZQoJ
CQkvLyB3ZSBhcHBlbmQgYWxzbyB0aGUgcHJvY2VzcyBJZCB0byB0aGUgbWFjL2hvc3RuYW1lIHN0
cmluZywgY29uc2lkZXJpbmcgdGhhdAoJCQkvLyBiZWZvcmUgamF2YSA5IHRoZXJlIGlzIG5vIHVu
aWZpZWQgbWV0aG9kIHRvIGdldCB0aGUgcGlkIGluIGV2ZXJ5IHBsYXRmb3JtCgkJCS8vIHRoZSBn
ZXRQaWQoKSBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uLCBpbiB0aGF0IGNhc2UgYSByYW5kb20gbnVt
YmVyIHdpbGwgYmUKCQkJLy8gdXNlZAoJCQkvLyBhcyBiZWZvcmUuCgoJCQlub2RlSWRTdHIgPSBu
b2RlSWRTdHIgKyAiLSIgKyB0aGlzLmdldFBJRCgpOwoJCQlub2RlSWQgPSBub2RlSWRTdHIuaGFz
aENvZGUoKTsKCgkJfSBjYXRjaCAoRXhjZXB0aW9uIGV4KSB7CgkJCW5vZGVJZCA9IChuZXcgU2Vj
dXJlUmFuZG9tKCkubmV4dEludCgpKTsKCQl9CgkJbm9kZUlkID0gbm9kZUlkICYgbWF4Tm9kZUlk
OwoJCXJldHVybiBub2RlSWQ7Cgl9CgoJcHJvdGVjdGVkIGxvbmcgZ2V0UElEKCkgdGhyb3dzIEV4
Y2VwdGlvbiB7CgkJU3RyaW5nIHByb2Nlc3NOYW1lID0gamF2YS5sYW5nLm1hbmFnZW1lbnQuTWFu
YWdlbWVudEZhY3RvcnkuZ2V0UnVudGltZU1YQmVhbigpLmdldE5hbWUoKTsKCQlpZiAocHJvY2Vz
c05hbWUgIT0gbnVsbCAmJiBwcm9jZXNzTmFtZS5sZW5ndGgoKSA+IDApIHsKCQkJcmV0dXJuIExv
bmcucGFyc2VMb25nKHByb2Nlc3NOYW1lLnNwbGl0KCJAIilbMF0pOwoJCX0gZWxzZSB7CgkJCXRo
cm93IG5ldyBFeGNlcHRpb24oKTsKCQl9Cgl9Cn0g</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
    <value>java.io.UnsupportedEncodingException</value>
    <value>java.security.InvalidAlgorithmParameterException</value>
    <value>java.security.InvalidKeyException</value>
    <value>java.security.NoSuchAlgorithmException</value>
    <value>java.security.spec.InvalidKeySpecException</value>
    <value>java.security.spec.KeySpec</value>
    <value>java.util.Base64</value>
    <value>javax.crypto.spec.PBEKeySpec</value>
    <value>javax.crypto.spec.SecretKeySpec</value>
    <value>javax.crypto.BadPaddingException</value>
    <value>javax.crypto.Cipher</value>
    <value>javax.crypto.IllegalBlockSizeException</value>
    <value>javax.crypto.NoSuchPaddingException</value>
    <value>javax.crypto.SecretKey</value>
    <value>javax.crypto.SecretKeyFactory</value>
    <value>javax.crypto.spec.IvParameterSpec</value>
    <value>java.security.SecureRandom</value>
    <value>java.time.Instant</value>
    <value>java.util.Enumeration</value>
    <value>java.util.Map</value>
    <value>java.net.NetworkInterface</value>
    <value>java.nio.ByteBuffer</value>
  </array>
</Values>
